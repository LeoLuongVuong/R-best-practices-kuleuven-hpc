---
title: "Best Practices in R"
format:
  revealjs:
    logo: Vlaanderen_is_supercomputing_full_17092018.png
    theme: [default, vsc.scss]
title-slide-attributes: 
  data-background-image: "VSC - Combi logo.png"
  data-background-size: contain
  data-background-position: bottom
author: Mariana Montes
execute:
  echo: true
code-annotations: select
---

## Let's start with a bad example!

```{r}
#| eval: false
#| code-line-numbers: "|1"

setwd("C:\\Users\\username\\My Projects\\R for best practices")

df<-read.csv( "Flight Subset 2013.csv")
df$month_name = month.name[df$month]
df$carrier <- as.factor(df$carrier)
df$tailnum <- as.factor(df$tailnum)
df$origin <- as.factor(df$origin)
for(i in 1:length(df$dep_delay)){
if(is.na(df$dep_delay[[i]])){
df[i, "dep_delay_cat"] <- NA
}else if(df$dep_delay[[i]] < -30){
    df[i, "dep_delay_cat"] <- "Early"
       }else if(df$dep_delay[[i]] < 30){
    df[i, "dep_delay_cat"] <- "Kind of on time"
  } else {
    df[i, "dep_delay_cat"] <- "Late"
  }
}
df$dep_delay_cat <- as.factor(df$dep_delay_cat)
```

# `setwd()` vs projects

## Avoid `setwd()`

- Absolute paths are particular to a specific location

- The path needs to be updated:

  + if you move your script around

  + if you work from a different device, a server...
  
  + if you share your script with someone else
  
## Project-based workflow

- R projects, git repositories...

- Relevant code and data together

- Paths relative to the root of a project

<!-- Add screenshot of RStudio and the projects? -->

## `{here}`

:::: {.columns}

::: {.column}

```{r}
#| error: true
library(here)

# i_am("another/path.txt")
i_am("index.qmd")
# here()
print(here() |> dir() |> length()) # contents in this directory
print(dir(here("analysis")))
# source(here("analysis", "model.R"))
```

:::

::: {.column}

![Illustration by Allison Horst.](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/57457fc3-1d2d-4a3b-a9b7-f0b62e418cd5_rw_1920.png?h=e0721f766fc8f031edeb67f7f8024595){fig-alt='A cartoon showing two paths side-by-side. On the left is a scary spooky forest, with spiderwebs and gnarled trees, with file paths written on the branches like “~/mmm/nope.csv” and “setwd(“/haha/good/luck/”), with a scared looking cute fuzzy monster running out of it. On the right is a bright, colorful path with flowers, rainbow and sunshine, with signs saying “here!” and “it’s all right here!” A monster facing away from us in a backpack and walking stick is looking toward the right path. Stylized text reads “here: find your path.”'}
:::

::::

## Git

- R projects can be git repositories

- Version control: keep track of the changes in your code, data, output...

- Share and collaborate via GitLab, Github...

<!-- Add logos of GitLab and Github, a screenshot of a diff... -->

::: footer

[Happy Git With R](https://happygitwithr.com/)

:::

# Naming

## Example

```{r}
#| eval: false

df<-read.csv( "Flight Subset 2013.csv")
df$month_name = month.name[df$month]
```

## Best practices

1. Beware of / avoid using existing names (e.g. `df`, `c`, `T`, `mean`)
2. Avoid using dots (although Base R does use them)
3. For files: stick to numbers, lowercase letters, `_` and `-` - beware of case!
4. For variables: use lowercase letters, numbers and snake_case.
4. Generally: variables = nouns; functions = verbs

## Improved example

```{r}
#| eval: false
library(here)
i_am("index.qmd")

some_flights<-read.csv(here( "data" , "nycflights13_random2000.csv"))
some_flights$month_name = month.name[some_flights$month]
```

# Spaces and punctuation

## Spaces and punctuation

:::: {.columns}

::: {.column width="50%"}
### No spaces

Apandacomesintoabar
:::

::: {.column width="50%"}
### With spaces

A panda comes into a bar
:::

::::

. . .

:::: {.columns}

::: {.column width="50%"}
### No commas

...eats shoots and leaves.
:::

::: {.column width="50%"}
### With commas

...eats, shoots, and leaves.
:::

::::

. . .

### Example

```{r}
#| eval: false
#| code-line-numbers: "|4|5|6,8|7"
library(here)
i_am("index.qmd")

some_flights<-read.csv(here( 'data' , "nycflights13_random2000.csv"))
some_flights$month_name=month.name[some_flights$month]
for(i in 1 : length(some_flights$dep_delay)){
if(abs(i)>30){print (some_flights $ dep_delay [ i ])}
}
```

## Best practices {.smaller .incremental}

:::: {.columns}
::: {.column width="50%"}
- No spaces between `()` and text inside
- Use `""` instead of `''` unless there is already `""` inside.
- The assignment operator in R is ` <- ` ^[Use `Alt+-`!]
- The assignment operator and infix operators should be surrounded by spaces.
:::

::: {.column width="50%"}
- Spaces around the `()` for `for`, `if` and `when`.
- No spaces around `:`, `$`, `[`, `^`, `+`...
- Spaces only after `()` for function arguments.
- Difference between `[]` and `[[]]`.
- Pay attention to indentation!
:::

::::

```{r}
#| eval: false
library(here)
i_am("index.qmd")

some_flights <- read.csv(here("data", "nycflights13_random2000.csv"))
some_flights$month_name <- month.name[some_flights$month]
for (i in 1:length(some_flights$dep_delay)) {
  if (abs(i) > 30) {
    print(some_flights$dep_delay[[i]])
  }
}
```

::: footer

[Tidyverse styleguide](https://style.tidyverse.org/syntax.html)

:::

# The pipe

## Example

```{r}
#| eval: false
#| code-line-numbers: "|1|2|3-5,17|6,8,10,12,14|18"
some_flights <- read.csv(here("data" , "nycflights13_random2000.csv"))
some_flights$month_name <- month.name[some_flights$month]
some_flights$carrier <- as.factor(some_flights$carrier)
some_flights$tailnum <- as.factor(some_flights$tailnum)
some_flights$origin <- as.factor(some_flights$origin)
for (i in 1:length(some_flights$dep_delay)) {
  if(is.na(some_flights$dep_delay[[i]])) {
    some_flights[i, "dep_delay_cat"] <- NA
  } else if (df$dep_delay[[i]] < -30) {
    some_flights[i, "dep_delay_cat"] <- "Early"
  } else if(df$dep_delay[[i]] < 30){
    some_flights[i, "dep_delay_cat"] <- "Kind of on time"
  } else {
    some_flights[i, "dep_delay_cat"] <- "Late"
  }
}
some_flights$dep_delay_cat <- as.factor(some_flights$dep_delay_cat)
some_flights_partial <- some_flights[c("month_name", "carrier", "tailnum", "origin", "dep_delay_cat")]
```

## Problems

- The same variable is overwritten: how to keep track of its state in an interactive session?

- Typing the same thing over and over

    + risk of typos
    + what if you rename the variable?
    
- Copying parts in other variables: what about memory?!

## Best practices

- Use the pipe (`{magrittr}`'s `%>%` or R's `|>`) to chain mutations to the same object. ^[Use `Ctrl+Shitf+M`!]

- Use `{dplyr}` functions to manipulate one or several columns at a time:

    + `mutate()` to create new columns or modify existing ones
    + `filter()` to select specific rows
    + `select()` to select specific columns


## Improved example

```{r}
library(dplyr)
library(readr)
some_flights_raw <- read_csv(here("data", "nycflights13_random2000.csv"))
some_flights_raw # specific state to which you might want to return
```

## Multiple columns at once

```{r}
some_flights <- some_flights_raw |> 
  mutate(across(where(is.character), as.factor))
some_flights |> select(where(is.factor))
```


# Functional programming

```
for (i in 1:length(some_flights$dep_delay)) {
  if(is.na(some_flights$dep_delay[[i]])) {
    some_flights[i, "dep_delay_cat"] <- NA
  } else if (df$dep_delay[[i]] < -30) {
    some_flights[i, "dep_delay_cat"] <- "Early"
  } else if(df$dep_delay[[i]] < 30){
    some_flights[i, "dep_delay_cat"] <- "Kind of on time"
  } else {
    some_flights[i, "dep_delay_cat"] <- "Late"
  }
}
```

## R and vectors

```{r}
#| include: false
set.seed(7)
```

```{r}
(character_vector <- c("a", "character", "vector"))
(numeric_vector <- rnorm(5))
(logical_vector <- sample(c(TRUE, FALSE), 5, replace=TRUE))
(a_list <- list(1, TRUE, list("list", "of", "lists")))
```

## Vectorized functions

```{r}
toupper(character_vector)
paste(character_vector, ":", toupper(character_vector))
numeric_vector * 4
```

## Working with lists

```{r}
class(a_list)
# get class of each item with a for loop
classes <- vector("character", length(a_list))
for (i in seq_along(a_list)) {
  classes[[i]] <- class(a_list[[i]])
}
# with a mapping function
purrr::map_chr(a_list, class)
```

## Match vectors with indices

```{r}
month.name
month.name[[3]]
month.name[c(4, 6, 7)]
head(some_flights$month)
month.name[head(some_flights$month)]
head(month.name[some_flights$month])
```

## Turn numeric into categorical: `case_when()`

```{r}
#| eval: false
for (i in 1:length(some_flights$dep_delay)) {
  if(is.na(some_flights$dep_delay[[i]])) {
    some_flights[i, "dep_delay_cat"] <- NA
  } else if (df$dep_delay[[i]] < -30) {
    some_flights[i, "dep_delay_cat"] <- "Early"
  } else if(df$dep_delay[[i]] < 30){
    some_flights[i, "dep_delay_cat"] <- "Kind of on time"
  } else {
    some_flights[i, "dep_delay_cat"] <- "Late"
  }
}
```

## `case_when()` {auto-animate=true}

```r
some_flights |> 
  mutate(dep_delay_cat = case_when(
    # condition ~ output
  ))
```

## `case_when()` {auto-animate=true}

```r
some_flights |> 
  mutate(dep_delay_cat = case_when(
    # condition ~ output
    is.na(dep_delay) ~ NA_character_, # if it is NA, return NA
    TRUE ~ "Late" # else, return "Late"
  ))
```

## `case_when()` {auto-animate=true}

```r
some_flights |> 
  mutate(dep_delay_cat = case_when(
    # condition ~ output
    is.na(dep_delay) ~ NA_character_, # if it is NA, return NA
    dep_delay < -30 ~ "Early", # else if it is lower than -30 return "Early"
    dep_delay < 30 ~ "Kind of on time", # ielse if it is lower than 30...
    TRUE ~ "Late" # else, return "Late"
  ))
```

## Improved example

```{r}
#| output-location: slide
#| code-line-numbers: "|1|2|3-8|9-10"
some_flights <- some_flights_raw |> 
  mutate(month_name = month.name[month]) |> 
  mutate(dep_delay_cat = case_when(
    is.na(dep_delay) ~ NA_character_,
    dep_delay < -30 ~ "Early",
    dep_delay < 30 ~ "Kind of on time",
    TRUE ~ "Late"
  ) |> as.factor())
some_flights |> 
  select(month, month_name, dep_delay, dep_delay_cat)
```

## Multiple columns at once

```{r}
#| output-location: slide
#| code-line-numbers: "|1,2,4-9,11|3,10|12-13"
some_flights <- some_flights |> 
  mutate(across(
    ends_with("delay"),
    ~ case_when(
      is.na(.x) ~ NA_character_,
      .x < -30 ~ "Early",
      .x < 30 ~ "Kind of on time",
      TRUE ~ "Late"
    ) |> as.factor(),
    .names = "{.col}_cat"
  ))
some_flights |> 
  select(contains("delay"))
```

# I/O

## {background-iframe="https://readr.tidyverse.org/"}

## RDS, Rdata, other formats

- Pros and cons of RDS

- Why not Rdata

- Interoperable formats (plain text and separators)

# Reproducibility

## {background-iframe="https://rstudio.github.io/renv/"}

## {background-iframe="https://reprex.tidyverse.org/"}

# References

## References and resources

- [Tidyverse styleguide](https://style.tidyverse.org/index.html)

- [Project oriented workflows](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)

- [R for Data Science (2e)](https://r4ds.hadley.nz/)

- [Advanced R](https://adv-r.hadley.nz/index.html)

- [Happy Git and Github for the useR](https://happygitwithr.com/)

- [renv](https://rstudio.github.io/renv/articles/renv.html)

